plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}


group = 'project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

allprojects {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.5"
        reportsDirectory = file("$buildDir/jacoco")
    }

}

// exclude these files from the coverage report
def excludePattern = ['**/*Config*'];

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    test.finalizedBy jacocoTestReport

    jacocoTestCoverageVerification {
        getSourceDirectories().from(files(sourceSets.getByName("main").allSource.srcDirs))
        afterEvaluate {
            getClassDirectories().setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludePattern)
            }))
        }

        violationRules {
            rule {
                limit {
                    minimum = 0.8
                }
            }
        }
    }
    check.dependsOn jacocoTestCoverageVerification

}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework:spring-jdbc'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'io.projectreactor.tools:blockhound:1.0.6.RELEASE'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}


tasks.named('test') {
    useJUnitPlatform()

    reports.html.destination = file("${reporting.baseDir}/${name}")

    testLogging {
        // Show that tests are run in the command-line output
        events 'passed'
    }
}

task coverageReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludePattern)
        }))
    }
    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco.xml")
        html.required = true
        html.destination file("${buildDir}/reports/html")
        csv.required = false
    }
}

